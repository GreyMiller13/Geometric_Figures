Цель проекта:

Попытайтесь решить следующую задачу в том смысле, в котором Вы ее понимаете.
Описание задачи
Существуют различные фигуры, например, квадрат, круг, шар. Все указанные фигуры
имеют некоторую меру. В качестве меры может выступать, например, площадь фигуры
или объем или площадь поверхности и другие. Фигуры можно объединять в группы.
Группы кроме фигур могут содержать другие группы. Группа фигур имеет меру, равную
применению оператора к коллекции фигур, входящих в группу. В качестве оператора
может выступать, например, оператор сложения, тогда мера группы есть сумма мер
фигур, входящих в группу или любой другой, который не зависит от порядка фигур в
группе.

Реализация:

Разработана блок-схема классов программы (см. mind_map).
Основные 3 базовых класса: Quadrilaterals, Triangles, Ellipses вынесены в отдельные библиотеки: _Quadrilaterals_, _Triangles_, _Ellipses_ соответственно.


Класс Quadrilaterals содержит переменные отвечающие за размер фигуры и ее высоту:
private double sideOne;
private double sideTwo;
private double sideThree;
private double sideFour;
private double height = 1; (значение задано по умолчанию и может быть изменено при необходимости. Значение по умолчанию нужно для корректной работы метода ZeroValue)

Обращение к данным переменным происходит через одноименные свойства:
public double SideOne
public double SideTwo
public double SideThree
public double SideFour
public double Hieght

Метод ThrowExeption проверяет на ввод данные, которые попадают в SideOne, SideTwo, SideThree, SideFour, Hieght. При вводе значений меньше, либо равного 0 будет выведена ошибка.
Метод ZeroValue проверяет корректность введенных данных(значение должно быть больше 0) и в случае соблюдений условий передает true/false.

Наследование от класса Quadrilaterals:
Дочерние классы: Quadrangle, Square, Rectangle, Rhomb, Parallelogram, Trapeze.

класс Quadrangle:
Имеет конструктор, принимающий 4 параметра, которые присваиваются через свойства класса Quadrilaterals в приватные переменные sideOne, sideTwo, sideThree, sideFour, height.
Методы Area и Perimeter рассчитывают площадь и периметр соответственно. Предварительно идет проверка переданных для вычислений данных(метод ZeroValue), в случае корректности происходят вычисления, в противном случае выводится результат -1. Используются формулы нахождения площади и периметра четырехугольника.
Последовательность передаваемых данных в конструктор не важна.

класс Square:
Имеет конструктор, принимающий 1 параметр, значение которого присваиваются через свойства класса Quadrilaterals в приватные переменные sideOne, sideTwo, sideThree, sideFour.
Методы Area и Perimeter рассчитывают площадь и периметр соответственно. Предварительно идет проверка переданных для вычислений данных(метод ZeroValue), в случае корректности происходят вычисления, в противном случае выводится результат -1. Используются формулы нахождения площади и периметра квадрата.
Последовательность передаваемых данных в конструктор не важна.

класс Rectangle:
Имеет конструктор, принимающий 2 параметра, значения которого присваиваются через свойства класса Quadrilaterals в приватные переменные sideOne, sideTwo, sideThree, sideFour.
Методы Area и Perimeter рассчитывают площадь и периметр соответственно. Предварительно идет проверка переданных для вычислений данных(метод ZeroValue), в случае корректности происходят вычисления, в противном случае выводится результат -1. Используются формулы нахождения площади и периметра прямоугольника.
Последовательность передаваемых данных в конструктор не важна.

класс Rhomb:
Имеет конструктор, принимающий 2 параметра, значения которого присваиваются через свойства класса Quadrilaterals в приватные переменные sideOne, sideTwo, sideThree, sideFour, height.
Методы Area и Perimeter рассчитывают площадь и периметр соответственно. Предварительно идет проверка переданных для вычислений данных(метод ZeroValue), в случае корректности происходят вычисления, в противном случае выводится результат -1. Используются формулы нахождения площади и периметра ромба.
Последовательность передаваемых данных в конструктор не важна, но при непоследовательной передаче параметров в конструктор в методе Perimeter будет проведена проверка на ввод данных. (Высота ромба не может быть больше длины ромба).

класс Parallelogram:
Имеет конструктор, принимающий 3 параметра, значения которого присваиваются через свойства класса Quadrilaterals в приватные переменные sideOne, sideTwo, sideThree, sideFour, height.
Методы Area и Perimeter рассчитывают площадь и периметр соответственно. Предварительно идет проверка переданных для вычислений данных(метод ZeroValue), в случае корректности происходят вычисления, в противном случае выводится результат -1. Используются формулы нахождения площади и периметра параллелограмма.
Последовательность передаваемых данных в конструктор важна. При непоследовательной передаче параметров в конструктор в методах Area и Perimeter будет неверно посчитаны данные.

класс Trapeze:
Имеет конструктор, принимающий 5 параметров, значения которого присваиваются через свойства класса Quadrilaterals в приватные переменные sideOne, sideTwo, sideThree, sideFour, height.
Методы Area и Perimeter рассчитывают площадь и периметр соответственно. Предварительно идет проверка переданных для вычислений данных(метод ZeroValue), в случае корректности происходят вычисления, в противном случае выводится результат -1. Используются формулы нахождения площади и периметра трапеции.
Последовательность передаваемых данных в конструктор важна. При непоследовательной передаче параметров в конструктор в методах Area и Perimeter будет неверно посчитаны данные.


Класс Triangles содержит переменные отвечающие за размер фигуры и ее высоту:
private double sideOne;
private double sideTwo;
private double sideThree;
private double height;

Обращение к данным переменным происходит через одноименные свойства:
public double SideOne
public double SideTwo
public double SideThree
public double Hieght

Метод ThrowExeption проверяет на ввод данные, которые попадают в SideOne, SideTwo, SideThree, Hieght. При вводе значений меньше, либо равного 0 будет выведена ошибка.
Метод ZeroValue проверяет корректность введенных данных(значение должно быть больше 0) и в случае соблюдений условий передает true/false.

Наследование от класса Triangles:
Дочерний класс: Triangle

класс Triangle:
Имеет конструктор, принимающий 4 параметра, значения которого присваиваются через свойства класса Quadrilaterals в приватные переменные sideOne, sideTwo, sideThree, height.
Методы Area и Perimeter рассчитывают площадь и периметр соответственно. Предварительно идет проверка переданных для вычислений данных(метод ZeroValue), в случае корректности происходят вычисления, в противном случае выводится результат -1. Используются формулы нахождения площади и периметра треугольника.
Последовательность передаваемых данных в конструктор важна. При непоследовательной передаче параметров в конструктор в методах Area и Perimeter будет неверно посчитаны данные.


Класс Ellipses содержит переменные отвечающие за размер фигуры и ее высоту:
private const double PI = 3.14;
private double radius;
private double halfShaftA;
private double halfShaftB;

Обращение к данным переменным происходит через одноименные свойства:
public double valuePI (только получение, без присвоения)
public double Radius
public double HalfShaftA
public double HalfShaftB

Метод ThrowExeption проверяет на ввод данные, которые попадают в Radius, HalfShaftA, HalfShaftB. При вводе значений меньше, либо равного 0 будет выведена ошибка.

Наследование от класса Ellipses:
Дочерние классы: Circle, Ellipse, Sphere.

класс Circle:
Имеет конструктор, принимающий 1 параметр, который присваиваются через свойства класса Quadrilaterals в приватную переменную radius.
Методы Area и Perimeter рассчитывают площадь и периметр соответственно. Используются формулы нахождения площади и периметра круга.
Последовательность передаваемых данных в конструктор не важна.

класс Ellipse:
Имеет конструктор, принимающий 2 параметра, которые присваиваются через свойства класса Quadrilaterals в приватные переменные halfShaftA, halfShaftB.
Методы Area и Perimeter рассчитывают площадь и периметр соответственно. Используются формулы нахождения площади и периметра эллипса.
Последовательность передаваемых данных в конструктор не важна, но в методе Perimeter будет проверка на размер полуосей (Из большей будет вычитаться меньшая, иначе получится отрицательный результат)

класс Sphere:
Имеет конструктор, принимающий 1 параметр, который присваиваются через свойства класса Quadrilaterals в приватную переменную radius.
Методы AreaSphere и VolumeSphere рассчитывают площадь и объем соответственно. Используются формулы нахождения площади и объема сферы.
Последовательность передаваемых данных в конструктор не важна.
